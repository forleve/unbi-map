!function(modules){var installedModules={};function __webpack_require__(moduleId){if(installedModules[moduleId])return installedModules[moduleId].exports;var module=installedModules[moduleId]={i:moduleId,l:!1,exports:{}};return modules[moduleId].call(module.exports,module,module.exports,__webpack_require__),module.l=!0,module.exports}__webpack_require__.m=modules,__webpack_require__.c=installedModules,__webpack_require__.d=function(exports,name,getter){__webpack_require__.o(exports,name)||Object.defineProperty(exports,name,{configurable:!1,enumerable:!0,get:getter})},__webpack_require__.n=function(module){var getter=module&&module.__esModule?function(){return module.default}:function(){return module};return __webpack_require__.d(getter,"a",getter),getter},__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property)},__webpack_require__.p="",__webpack_require__(__webpack_require__.s=15)}([function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"b",function(){return feature}),__webpack_require__.d(__webpack_exports__,"g",function(){return point}),__webpack_require__.d(__webpack_exports__,"h",function(){return polygon}),__webpack_require__.d(__webpack_exports__,"f",function(){return lineString}),__webpack_require__.d(__webpack_exports__,"c",function(){return featureCollection}),__webpack_require__.d(__webpack_exports__,"i",function(){return radiansToLength}),__webpack_require__.d(__webpack_exports__,"a",function(){return degreesToRadians}),__webpack_require__.d(__webpack_exports__,"d",function(){return isNumber}),__webpack_require__.d(__webpack_exports__,"e",function(){return isObject});var factors={meters:6371008.8,metres:6371008.8,millimeters:6371008800,millimetres:6371008800,centimeters:637100880,centimetres:637100880,kilometers:6371.0088,kilometres:6371.0088,miles:3958.761333810546,nauticalmiles:6371008.8/1852,inches:6371008.8*39.37,yards:6371008.8/1.0936,feet:20902260.511392,radians:1,degrees:6371008.8/111325};function feature(geometry,properties,options){if(!isObject(options=options||{}))throw new Error("options is invalid");var bbox=options.bbox,id=options.id;if(void 0===geometry)throw new Error("geometry is required");if(properties&&properties.constructor!==Object)throw new Error("properties must be an Object");bbox&&validateBBox(bbox),id&&validateId(id);var feat={type:"Feature"};return id&&(feat.id=id),bbox&&(feat.bbox=bbox),feat.properties=properties||{},feat.geometry=geometry,feat}function point(coordinates,properties,options){if(!coordinates)throw new Error("coordinates is required");if(!Array.isArray(coordinates))throw new Error("coordinates must be an Array");if(coordinates.length<2)throw new Error("coordinates must be at least 2 numbers long");if(!isNumber(coordinates[0])||!isNumber(coordinates[1]))throw new Error("coordinates must contain numbers");return feature({type:"Point",coordinates:coordinates},properties,options)}function polygon(coordinates,properties,options){if(!coordinates)throw new Error("coordinates is required");for(var i=0;i<coordinates.length;i++){var ring=coordinates[i];if(ring.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var j=0;j<ring[ring.length-1].length;j++){if(0===i&&0===j&&!isNumber(ring[0][0])||!isNumber(ring[0][1]))throw new Error("coordinates must contain numbers");if(ring[ring.length-1][j]!==ring[0][j])throw new Error("First and last Position are not equivalent.")}}return feature({type:"Polygon",coordinates:coordinates},properties,options)}function lineString(coordinates,properties,options){if(!coordinates)throw new Error("coordinates is required");if(coordinates.length<2)throw new Error("coordinates must be an array of two or more positions");if(!isNumber(coordinates[0][1])||!isNumber(coordinates[0][1]))throw new Error("coordinates must contain numbers");return feature({type:"LineString",coordinates:coordinates},properties,options)}function featureCollection(features,options){if(!isObject(options=options||{}))throw new Error("options is invalid");var bbox=options.bbox,id=options.id;if(!features)throw new Error("No features passed");if(!Array.isArray(features))throw new Error("features must be an Array");bbox&&validateBBox(bbox),id&&validateId(id);var fc={type:"FeatureCollection"};return id&&(fc.id=id),bbox&&(fc.bbox=bbox),fc.features=features,fc}function radiansToLength(radians,units){if(null==radians)throw new Error("radians is required");if(units&&"string"!=typeof units)throw new Error("units must be a string");var factor=factors[units||"kilometers"];if(!factor)throw new Error(units+" units is invalid");return radians*factor}function degreesToRadians(degrees){if(null==degrees)throw new Error("degrees is required");return degrees%360*Math.PI/180}function isNumber(num){return!isNaN(num)&&null!==num&&!Array.isArray(num)}function isObject(input){return!!input&&input.constructor===Object}function validateBBox(bbox){if(!bbox)throw new Error("bbox is required");if(!Array.isArray(bbox))throw new Error("bbox must be an Array");if(4!==bbox.length&&6!==bbox.length)throw new Error("bbox must be an Array of 4 or 6 numbers");bbox.forEach(function(num){if(!isNumber(num))throw new Error("bbox must only contain numbers")})}function validateId(id){if(!id)throw new Error("id is required");if(-1===["string","number"].indexOf(typeof id))throw new Error("id must be a number or a string")}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"i",function(){return performanceTime}),__webpack_require__.d(__webpack_exports__,"a",function(){return idGenerator}),__webpack_require__.d(__webpack_exports__,"b",functio